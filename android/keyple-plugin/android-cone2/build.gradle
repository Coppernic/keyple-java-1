def versionKeyple = "0.8.1"

if(project.getProperties().containsKey("release") && release=="true"){
    project.version = versionKeyple
}else{
    project.version = versionKeyple +'-'+ timestamp+ '-SNAPSHOT'
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

archivesBaseName = "keyple-android-plugin-cone2"

project.group 'org.eclipse.keyple'
project.description = 'Keyple Plugin Android C-One²'

publishing {
    publications {
        art(MavenPublication) {
            groupId project.group
            artifactId archivesBaseName
            version "${project.version}-$timestamp"

            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "release") {
                    variant.outputs.all {
                        logger.info "Artifact : ${it.outputFile}"
                        artifact(it.outputFile)
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

android {
    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 27
        targetSdkVersion 26
        versionName project.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    testOptions {
        unitTests.returnDefaultValues = true//mock Log Android object
    }


    lintOptions {
        abortOnError false
    }

    //generate output aar with a qualified name : with version number
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${version}.aar"
            }
        }
    }

    //create a task to generate javadoc for each variants
    libraryVariants.all { variant ->
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for variant ${variant.name.capitalize()}"
            //println "Create Javadoc Task for variant ${variant.name.capitalize()}"

            source = variant.javaCompile.source
            options.links("http://docs.oracle.com/javase/6/docs/api/")
            options.links("http://d.android.com/reference/")

            //println 'classpath : ' + classpath.getFiles()
            //println 'options links : ' + options.links
            //println 'source : ' + source.getFiles()

            // First add all of your dependencies to the classpath, then add the android jars
            doFirst {
                //doFirst is needed else we get the error "Cannot create variant 'android-lint' after configuration" with gradle 4.4+
                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
            }
            classpath += files(android.getBootClasspath())


            // We're excluding these generated files
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            failOnError = false
            destinationDir = file("${project.docsDir}/javadoc")
            //destinationDir = file(System.getProperty("user.home") +"/pages")

        }
    }

    packagingOptions {
        exclude 'META-INF/lib_release.kotlin_module'
        exclude("META-INF/NOTICE")
        exclude("META-INF/NOTICE.txt")
        exclude("META-INF/notice.txt")
        exclude("META-INF/NOTICE.md")
    }
}

//build javadoc
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    //classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//build source jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar, javadocJar
}

//sign if needed (based on the doSign variable)
if (project.getProperties().containsKey("doSign") && doSign=="true") {
    apply plugin: 'signing'

    ext."signing.keyId" = "0C140E36"
    //other properties are defined in the gradle.properties
    signing {
        sign configurations.archives
    }
}

/* from https://central.sonatype.org/pages/gradle.html */
/*
uploadArchives {
    repositories {
        mavenDeployer {
            //define local or remote upload repository (based on the doSign variable)
            if (project.getProperties().containsKey("doSign") && doSign=="true") {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            pom.project {
                name project.description
                description project.description
                packaging "aar"

                organization("Eclipse Keyple"){
                    name "Eclipse Keyple"
                    url "https://projects.eclipse.org/projects/iot.keyple"
                }

                scm {
                    connection 'scm:git:git://github.com/eclipse/keyple-java.git'
                    developerConnection 'scm:git:https://github.com/eclipse/keyple-java.git'
                    url 'http://github.com/eclipse/keyple-java/tree/master'
                }

                licenses {
                    license {
                        name 'Eclipse Public License - v 2.0'
                        url 'https://www.eclipse.org/legal/epl-2.0/'
                    }
                }

                developers {
                    developer {
                        name 'Olivier Delcroix'
                        email 'odelcroi@gmail.com'
                    }
                    developer {
                        name 'Jean-Pierre Fortune'
                        email 'jean-pierre.fortune@ialto.com'
                    }
                    developer {
                        name 'Pierre Terrée'
                        email 'pierre.terree@calypsonet.org'
                    }
                }

                //dependencies mapping is defined manually
                pom.scopeMappings.with {
                    mappings.clear()
                    addMapping(1, configurations.implementation, 'compile')
                    addMapping(2, configurations.testImplementation, 'test')
                    addMapping(3, configurations.androidTestImplementation, 'test')
                }
            }
        }
    }
}*/

repositories {
    mavenLocal()
    mavenCentral()
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://nexus.coppernic.fr/repository/maven-public" }
    maven { url 'https://artifactory.coppernic.fr/artifactory/libs-release' }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //keyple-core project
    //implementation group: 'org.eclipse.keyple', name: 'keyple-java-core', version: project.version

    // Android
    implementation("com.google.android.material:material:1.9.0")
    implementation "com.android.support:support-v4:${android_support_version}"
    implementation "com.android.support:appcompat-v7:${android_support_version}"
    implementation "com.android.support:support-annotations:${android_support_version}"
    implementation 'com.android.support:multidex:1.0.3'
    implementation "org.slf4j:slf4j-api:${slf4japi_version}"

    // Coppernic
    implementation 'fr.coppernic.sdk.ask:CpcAsk:4.2.0'
    implementation 'fr.coppernic.sdk.core:CpcCore:3.3.0'
    implementation 'fr.coppernic.sdk.cpcutils:CpcUtilsLib:6.21.0'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Test
    implementation 'androidx.test.ext:junit:1.1.5'
    implementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'com.github.bastienpaulfr:Treessence:1.0.5'

    //testImplementation group: 'org.eclipse.keyple', name: 'keyple-calypso', version: '1.0.0-RC4'
    //testImplementation project(path:':java:component:keyple-calypso')

    /**Power mock**/
    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.powermock:powermock-api-mockito:${powermock_version}"
    testImplementation "org.powermock:powermock-module-junit4:${powermock_version}"
    /**End of power mock **/


}
